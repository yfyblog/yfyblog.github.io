# name: Github Pages Astro CI

# on:
#   # 每次推送到 `main` 分支时触发这个“工作流程”
#   # 如果你使用了别的分支名，请按需将 `main` 替换成你的分支名
#   push:
#     branches: [ main ]
#   # 允许你在 GitHub 上的 Actions 标签中手动触发此“工作流程”
#   workflow_dispatch:
  
# # 允许 job 克隆 repo 并创建一个 page deployment
# permissions:
#   contents: read
#   pages: write
#   id-token: write

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout your repository using git
#         uses: actions/checkout@v2          
#       - name: Install, build, and upload your site
#         uses: withastro/action@v0

# deploy:
#   needs: build
#   runs-on: ubuntu-latest
#   environment:
#     name: github-pages
#     url: ${{ steps.deployment.outputs.page_url }}
#   steps:
#     # 检出代码
#     - name: Checkout repository
#       uses: actions/checkout@v3

#     # 设置 Node.js 环境
#     - name: Set up Node.js
#       uses: actions/setup-node@v3
#       with:
#         node-version: '16'

#     # 安装依赖
#     - name: Install dependencies
#       run: |
#         npm install
#         npm run build

#     # 部署到 GitHub Pages
#     - name: Deploy to GitHub Pages
#       id: deployment
#       uses: actions/deploy-pages@v1
#       with:
#         branch: main  # 如果你使用的是不同的分支（例如 gh-pages），请修改为该分支
#         folder: ./dist # 这里是你生成的静态文件夹


# name: Deploy to GitHub Pages

# on:
#   # 每次推送到 `main` 分支时触发这个“工作流程”
#   # 如果你使用了别的分支名，请按需将 `main` 替换成你的分支名
#   push:
#     branches: [ main ]
#   # 允许你在 GitHub 上的 Actions 标签中手动触发此“工作流程”
#   workflow_dispatch:

# # 允许 job 克隆 repo 并创建一个 page deployment
# permissions:
#   contents: read
#   pages: write
#   id-token: write

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout your repository using git
#         uses: actions/checkout@v4
#       - name: Install, build, and upload your site
#         uses: withastro/action@v2
#         with:
#           # path: . # 存储库中 Astro 项目的根位置。（可选）
#           # node-version: 20 # 用于构建站点的特定 Node.js 版本，默认为 20。（可选）
#           package-manager: pnpm@latest # 应使用哪个 Node.js 包管理器来安装依赖项和构建站点。会根据存储库中的 lockfile 自动检测。

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     environment:
#       name: github-pages
#       url: ${{ steps.deployment.outputs.page_url }}
#     steps:
#       # - name: Deploy to GitHub Pages
#       #   id: deployment
#       #   uses: actions/deploy-pages@v4
#       name: Deploy to GitHub Pages
#       uses: actions/deploy-pages@v4
#       with:
#         artifact_id: ${{ steps.build.outputs.artifact_id }}
#         pages_build_version: ${{ steps.build.outputs.pages_build_version }}
#         branch: gh-pages  # 如果你使用的是 gh-pages 分支
#         folder: dist  # 确保这是构建产物目录

name: Deploy Astro site to GitHub Pages

on:
  push:
    branches:
      - main  # 或你用的主分支名称

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: pnpm install  # 或 npm install

      - name: Build Astro site
        run: pnpm run build  # 或 npm run build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./dist
          # 添加 .nojekyll 文件避免默认启用 Jekyll
          publish_branch: gh-pages
          keep_files: true
